configurations {
  jberet
}

dependencies {
  jberet 'org.jboss.spec.javax.batch:jboss-batch-api_1.0_spec:1.0.0.Final'
  jberet 'org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final'
  jberet 'org.jberet:jberet-core:1.2.2.Final'
  jberet 'org.jberet:jberet-se:1.2.0.Final'
  jberet 'org.jboss.weld:weld-core:2.4.2.Final'
  jberet 'org.jboss.weld.se:weld-se:2.4.2.Final'
  jberet 'org.jboss.marshalling:jboss-marshalling:1.4.11.Final'
  jberet 'org.jboss.logging:jboss-logging:3.3.0.Final'
  jberet 'org.wildfly.security:wildfly-security-manager:1.1.2.Final'
  
}

task runBatchlet(type: JavaExec, dependsOn: 'copyFile') {
  classpath += configurations.jberet + getTestRuntimeClasspathWithoutGlassfish()
  main = "nablarch.fw.batch.ee.Main"
  args = ["batchlet-progress-test", "--diConfig", "manual-test/jbatch.xml", "--key1", "value1"]
}

task runChunk(type: JavaExec, dependsOn: 'copyFile') {
  classpath += configurations.jberet + getTestRuntimeClasspathWithoutGlassfish()
  main = "nablarch.fw.batch.ee.Main"
  args "chunk-progress-test"
}

task runSplit(type: JavaExec, dependsOn: 'copyFile') {
  classpath += configurations.jberet + getTestRuntimeClasspathWithoutGlassfish()
  main = "nablarch.fw.batch.ee.Main"
  args "split-progress-test"
}

task copyFile(dependsOn: ['compileTestJava', 'processTestResources']) {
  ['build/classes/main/META-INF/', 'build/classes/test/META-INF/'].each { path ->
    doLast {
      copy {
        from 'build/resources/main/META-INF/beans.xml'
        into path
      }
    }
  }
}

[runBatchlet, runChunk, runSplit]*.group = 'progress'

def getTestRuntimeClasspathWithoutGlassfish() {
  def list = sourceSets.test.runtimeClasspath.grep {
    !it.name.contains('glassfish')
  }
  return files(list)
}

