import javax.swing.JButton

group = 'com.nablarch.framework'
version = '1.1.0'
description = 'jBatch(JSR352)に準拠したバッチ処理方式を実現する'

buildscript {
  repositories {
    mavenLocal()
    maven { url "${developLibUrl}" }
    jcenter()
  }
  dependencies {
    classpath "com.nablarch.dev:nablarch-gradle-plugin:${nablarchGradlePluginVersion}"
    classpath "net.saliman:gradle-cobertura-plugin:${coberturaPluginVersion}"
  }
}
apply plugin: 'com.nablarch.dev.nablarch-build'
apply plugin: 'com.nablarch.dev.nablarch-maven-deploy'
apply plugin: 'com.nablarch.dev.nablarch-sonarqube'
apply plugin: 'com.nablarch.dev.nablarch-version'
apply plugin: 'cobertura'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'

// ビルド時のJavaバージョンを指定する
sourceCompatibility=JavaVersion.VERSION_1_6
targetCompatibility=JavaVersion.VERSION_1_6

configurations {
  slf
  jberet
}

dependencies {
  // jBatch api
  provided 'javax.batch:javax.batch-api:1.0'
  provided 'javax.inject:javax.inject:1'
  provided 'javax.enterprise:cdi-api:1.1'

  // nablarch
  compile "com.nablarch.framework:nablarch-core-repository:${nablarchCoreRepositoryVersion}"
  compile "com.nablarch.framework:nablarch-core-applog:${nablarchCoreApplogVersion}"
  compile "com.nablarch.framework:nablarch-core-transaction:${nablarchCoreTransactionVersion}"
  compile "com.nablarch.framework:nablarch-common-dao:${nablarchCommonDaoVersion}"
  compile "com.nablarch.framework:nablarch-fw-batch:${nablarchFwBatchVersion}"

  // jdbc
  compile "com.nablarch.framework:nablarch-common-jdbc:${nablarchCommonJdbcVersion}"

  // test api
  testCompile 'org.jmockit:jmockit:1.13'
  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:hamcrest-all:1.3'
  testCompile 'com.nablarch.dev:nablarch-test-support:0.0.5'
  testCompile 'com.nablarch.integration:nablarch-slf4j-adaptor:1.0.0'

  testCompile 'com.h2database:h2:1.4.187'

  testCompile 'org.glassfish.main.extras:glassfish-embedded-all:4.1'
  testCompile 'org.jboss.arquillian.junit:arquillian-junit-container:1.0.0.Final'
  testCompile 'org.jboss.arquillian.container:arquillian-glassfish-embedded-3.1:1.0.0.CR4'
  testCompile 'org.slf4j:jul-to-slf4j:1.7.22'
  testCompile 'ch.qos.logback:logback-classic:1.1.9'

  cobertura("net.sourceforge.cobertura:cobertura:2.1.1") {
    exclude group:'*', module: 'slf4j-api'
  }

  slf 'org.slf4j:slf4j-api:1.7.5'

  jberet 'org.jboss.spec.javax.batch:jboss-batch-api_1.0_spec:1.0.0.Final'
  jberet 'org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final'
  jberet 'org.jberet:jberet-core:1.2.2.Final'
  jberet 'org.jberet:jberet-se:1.2.0.Final'
  jberet 'org.jboss.weld:weld-core:2.4.2.Final'
  jberet 'org.jboss.weld.se:weld-se:2.4.2.Final'
  jberet 'org.jboss.marshalling:jboss-marshalling:1.4.11.Final'
  jberet 'org.jboss.logging:jboss-logging:3.3.0.Final'
  jberet 'org.wildfly.security:wildfly-security-manager:1.1.2.Final'

}

test {

  jvmArgs (
          '-XX:MaxPermSize=256m',
          '-Xmx512m',
          '-Dfile.encoding=UTF-8',
          '-XX:-UseSplitVerifier'
  )

  ignoreFailures = true


  doFirst {
    def logDir = new File('log')
    if (!logDir.exists()) {
      assert logDir.mkdirs()
    }
  }

  cobertura {
    coverageSourceDirs = ["${projectDir}/src/main/java/"]
    coverageIgnoreTrivial = true
    coverageFormats = ['xml']
    coverageDirs = [project.sourceSets.main.output.classesDir]
    coverageExcludes = [
            '.*Abstract.+Listener.*',
    ]
  }
}

task coverage(dependsOn: ['clean', 'generateCoberturaReportByAnt'])

def coberturaReportDir = new File(project.buildDir, "cobertura-report")

task generateCoberturaReportByAnt(dependsOn: 'cobertura') {
  def dataFile = "${project.buildDir}/cobertura/cobertura.ser"

  inputs.file file(dataFile)
  outputs.dir coberturaReportDir

  doLast {
    ant {
      taskdef(resource: 'tasks.properties',
              classpath: configurations.cobertura.asPath + ':' + configurations.slf.asPath)

      'cobertura-report'(
              destdir: coberturaReportDir,
              datafile: dataFile,
              srcdir: "${projectDir}/src/main/java/",
              format: 'xml'
      )
    }
  }
}

sonarRunner {
  sonarProperties {
    property "sonar.java.coveragePlugin", "cobertura"
    property "sonar.cobertura.reportPath", "${coberturaReportDir}/coverage.xml"
  }
}

task runBatchlet(type: JavaExec, dependsOn: 'copyFile') {
  classpath += configurations.jberet + getTestRuntimeClasspathWithoutGlassfish()
  main = "org.jberet.se.Main"
  args "batchlet-progress-test"
}

task runChunk(type: JavaExec, dependsOn: 'copyFile') {
  classpath += configurations.jberet + getTestRuntimeClasspathWithoutGlassfish()
  main = "org.jberet.se.Main"
  args "chunk-progress-test"
}

task runSplit(type: JavaExec, dependsOn: 'copyFile') {
  classpath += configurations.jberet + getTestRuntimeClasspathWithoutGlassfish()
  main = "org.jberet.se.Main"
  args "split-progress-test"
}

task copyFile(dependsOn: ['compileTestJava', 'processTestResources']) {
  ['build/classes/main/META-INF/', 'build/classes/test/META-INF/'].each { path ->
    doLast {
      copy {
        from 'build/resources/main/META-INF/beans.xml'
        into path
      }
    }
  }
}

[runBatchlet, runChunk, runSplit]*.group = 'progress'

def getTestRuntimeClasspathWithoutGlassfish() {
  def list = sourceSets.test.runtimeClasspath.grep {
    !it.name.contains('glassfish')
  }
  return files(list)
}

tasks.sonarRunner {
  dependsOn = ['coverage']
}
